[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= node[:glance][:verbose] %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= node[:glance][:debug] %>

# Address to bind the registry server
bind_host = <%= node[:glance][:registry_host] %>

# Port the bind the registry server to
bind_port = <%= node[:glance][:registry_bind_port] %>

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_file = <%= node[:glance][:log_dir] %>/registry.log

# Send logs to syslog (/dev/log) instead of to file specified by `log_file`
use_syslog = <%= node[:glance][:use_syslog] %>

# Backlog requests when creating socket
backlog = <%= node[:glance][:backlog] %>

# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
sql_connection = <%= @sql_connection %>

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = <%= node[:glance][:sql_idle_timeout] %>

# Limit the api to return `param_limit_max` items in a call to a container. If
# a larger `limit` query param is provided, it will be reduced to this value.
api_limit_max = <%= node[:glance][:api_limit_max] %>

# If a `limit` query param is not provided in an api request, it will
# default to `limit_param_default`
limit_param_default = <%= node[:glance][:limit_param_default] %>

# ================= SSL Options ===============================

# Certificate file to use when starting registry server securely
<% if node[:glance][:cert_file] then %>
cert_file = <%= node[:glance][:cert_file] %>
<% end %>

# Private key file to use when starting registry server securely
<% if node[:glance][:key_file] then %>
key_file = <%= node[:glance][:key_file] %>
<% end %>

[pipeline:glance-registry]
<% if node[:glance][:auth_type] == "noauth" %>
pipeline = context registryapp
<% elsif node[:glance][:auth_type] == "keystone" %>
pipeline = authtoken keystone_shim context registryapp
<% end %>

[app:registryapp]
paste.app_factory = glance.registry.server:app_factory

[filter:context]
context_class = glance.registry.context.RequestContext
paste.filter_factory = glance.common.context:filter_factory

[filter:authtoken]
paste.filter_factory = keystone.middleware.auth_token:filter_factory
service_protocol = <%= node[:glance][:keystone_service_protocol] %>
service_host = <%= node[:glance][:keystone_service_host] %>
service_port = <%= node[:glance][:keystone_service_port] %>
auth_host = <%= node[:glance][:keystone_auth_host] %>
auth_port = <%= node[:glance][:keystone_auth_port] %>
auth_protocol = <%= node[:glance][:keystone_auth_protocol] %>
auth_uri = <%= node[:glance][:keystone_auth_uri] %>
admin_token = <%= node[:glance][:keystone_admin_token] %>

[filter:keystone_shim]
paste.filter_factory = keystone.middleware.glance_auth_token:filter_factory

[filter:debuglogger]
paste.filter_factory = openstackutil.logger.glance_logger:DebugLogger.factory

